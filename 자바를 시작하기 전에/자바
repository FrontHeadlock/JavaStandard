#자바의 특징
1. 운영체제에 독립적
    - 자바 프로그램은 OS나 HW가 아닌 JVM하고만 통신하고 JVM이 자바 으용프로그램으로부터 전달받은 명령을 해당 OS가 이해하도록 변환하여 전달
    -  자바로 작성된 프로그램은 OS에 독립적이지만 JVM은 OS에 종속적이어서 서로 다른 버전의 JVM이 제공됨
    -  그렇기 때문에 자바로 작성된 프로그램은 WRITE ONCE, RUN ANYWHERE의 특성을 가짐
2. 객체지향 언어
    - Object Orineted Programming Language
    - 객체지향개념의 특징인 상속, 캡슐화, 다형성 등이 적용된 순수한 객체지향 언어
3. 자동 메모리 관리(Garbage Collection)
    - 자바로 작성된 프로그램 실행시 GC가 자동으로 메모리 관리
        - 프로그래머가 메모리를 따로 관리할 필요 X
4. 멀티쓰레드 지원
    - 시스템과 관계없이 구현하며 Java API가 제공되어 구현이 쉽다
    - 여러 쓰레드에 대한 스케줄링을 자바 인터프리터가 담당
5. 동적 로딩(Dynamic Loading) 지원
    - 실행 시에 모든 클래스가 로딩되지 않고 필요한 시점에 클래스를 로딩하여 사용 가능
    - 일부 클래스가 변경되어도 전체 어플리케이션을 재컴파일 X
        - 어플리케이션에 변경사항이 발생해도 비교적 적은 작업만으로도 처리가능한 유연한 어플리케이션 작성 가능


#JVM, JDK, JRE

**JVM** = 자바를 실행하기 위한 가상 컴퓨터
    - 가상 컴퓨터 = 실제 컴퓨터(HW)가 아닌 SW로 구현된 컴퓨터
    - 자바로 작성된 APP은 모두 JVM에서만 실행, 자바 APP이 실행되기 위해서는 JVM이 반드시 필요
        : 일반 어플리케이션은  com <-> OS <-> APP
        : Java 어플리케이션은 com <-> OS <-> JVM <-> APP
            - JVM을 한 번 더 거치고, 하드웨어에 알맞게 완전히 컴파일된 상태가 아니라 실행 시에 해석되어 속도가 느리다는 단점
            - 그러나 요즘에는 바이트코드를 하드웨어의 기계어로 바로 변환해주는 JIT 컴파일러로 속도의 격차 많이 감소
            - 일반적으로는 OS - APP이 붙어있어 OS 종속적이나 JAVA는 JVM이 사이에 존재해 독립적,
              다만 JVM은 OS 종속적이라 해당 OS에 맞는 JVM이 요구된다.

**JDK** = JavaDevelopmentKit(자바 개발도구)
    - JDK 설치시 JVM과 JavaAPI외에 자바 개발에 필요한 프로그램들이 설치 (JRE,java,javac,jar,javadoc 등)
    - JDK /bin 디렉토리의 주요 실행 파일
        - javac.exe : java compiler, java sourceCode 를 byteCode로 컴파일
        - java.exe. : java interpreter, compiler가 생성한 byteCode 해석하고 실행
        - javap.exe : 역어셈블러ㅓ, 컴파일된 클래스파일을 원래의 소스로 변환
    - javadoc.exe : 자동문서생성기, 소스파일의 주석을 이용해 JAVA API 문서와 같은 형식의 문서를 자동 생성
    - jar.exe     : 압축프로그램, 클래스 파일과 프로그램 실행에 관련된 파일을 하나의 jar 파일로 압축하거나, 압축해제
        **jar(Java ARchive)**
        : .jar 확장자 파일
        : JAVA 어플리케이션이 동작할 수 있도록 자바 프로젝트를 압축한 파일(windows.zip)
        : Java로 작성한 어플리케이션을 배포할 때에 관련 파일을 1개에 패키징할 때에 이용되고, 실제로 많은 Class 라이브러리가 이 형식으로 배포되고 있음.
        : 원하는 구조로 구성 가능하며, JDK에 포함된 JRE만 있어도 실행 가능.
        : ✅ 장점
            1. 독립적인 Java 애플리케이션을 패키징할 수 있고, 실행 가능한 JAR 파일로 만들어서 개발자가 쉽게 애플리케이션 실행 가능.
            2. 압축된 형식으로 클래스, 리소스, 라이브러리 등을 포함하므로 배포와 전달이 용이
            3. SpringBoot의 경우 Jar 파일 내에 WAS(embeddedTomcat)가 내장되어 .jar로도 빌드 가능 

        **war(Web application ARchive)
        : Java의 Web 어플리케이션으로 이용되는 클래스 파일(servlet), 설정 파일(xml), JSP나 HTML 파일, JAR 형식의 라이브러리 등이 압축되어 있는 아카이브
        : JSP나 Servlet 등 WAS 컨테이너 위에서 동작하게끔 빌드된, 웹 어플리케이션(Web Application) 압축 파일 포맷
        : Tomcat, Jetty, Java EE server(JBoss or Glassfish) 같은 별도의 웹서버(WEB) 또는 웹컨테이너(WAS) 환경에서 사용되기 위해 고안됨
        : WAR 형태로 묶어 /webapps 등의 지정된 경로에 넣어주고, Tomcat 등의 웹 컨테이너(WAS)에 넣어 배포하는 방식
        : ✅ 장점
            1. Java 웹 애플리케이션을 패키징하는 데 최적화
        : ✅ 단점
            1. 웹 컨테이너나 서버에 종속적이기 때문에 특정한 웹 컨테이너 환경이 필요
            2. 배포 및 전달에 있어서 JAR 파일에 비해 크기가 크고 번거로울 수 있음


**JRE** = JavaRuntimeEvironment(자바 실행환경)
    - 자바로 작성된 응용프로그램이 실행되기 위한 최소환경
    - 자바 클래스 라이브러리, 클래스 로더, JVM을 포함
